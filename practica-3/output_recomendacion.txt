=========================
Testing toy 1 dataset
Reading the data at 14:37:47...
Ratings matrix takes 0.0 MB in RAM
--> elapsed time: 0:00:00 <--
-------------------------
Testing the ratings data structures
11 ratings by 4 users on 5 items
Ratings of user v: {'b': 4, 'c': 5, 'd': 3}
Ratings of item b: {'v': 4, 'x': 2, 'y': 4}
-------------------------
Testing RandomRecommender (top 4)
Four example recommendations:
    User v -> <a:0.9786 e:0.1183>
    User x -> <c:0.9447 d:0.5218>
    User y -> <d:0.5684 e:0.0188>
    User z -> <e:0.6818 a:0.6176 c:0.6169 b:0.6121>
Precision@4 = 0.0625
Recall@4 = 0.25
--> elapsed time: 0:00:00 <--
-------------------------
Testing MajorityRecommender (top 4)
Four example recommendations:
    User v -> <a:1 e:1>
    User x -> <c:2 d:1>
    User y -> <d:1 e:1>
    User z -> <b:2 c:2 a:1 e:1>
Precision@4 = 0.0625
Recall@4 = 0.25
--> elapsed time: 0:00:00 <--
-------------------------
Testing AverageRecommender (top 4)
Four example recommendations:
    User v -> <a:3>
    User x -> <c:4.5 d:4>
    User y -> <d:4>
    User z -> <c:4.5 b:3.3333 a:3>
Precision@4 = 0.0625
Recall@4 = 0.25
--> elapsed time: 0:00:00 <--
-------------------------
Creating user cosine similarity
--> elapsed time: 0:00:00 <--
Creating kNN recommender
--> elapsed time: 0:00:00 <--
Testing UserKNNRecommender (top 4)
Four example recommendations:
    User v -> <a:1.7295 e:0.6746>
    User x -> <c:2.1927 d:0.506>
    User y -> <d:2.6588 e:1.3494>
    User z -> <c:2.1213 b:1.6971>
Precision@4 = 0.0625
Recall@4 = 0.25
--> elapsed time: 0:00:00 <--
=========================
Testing toy 2 dataset
Reading the data at 14:37:47...
Ratings matrix takes 0.0 MB in RAM
--> elapsed time: 0:00:00 <--
-------------------------
Testing the ratings data structures
22 ratings by 5 users on 10 items
Ratings of user 1: {1: 1, 5: 5, 7: 2, 10: 5}
Ratings of item 2: {2: 2, 4: 2}
-------------------------
Testing RandomRecommender (top 4)
Four example recommendations:
    User 1 -> <9:0.8289 4:0.7163 2:0.6674 6:0.1832>
    User 2 -> <10:0.9527 3:0.7352 1:0.6778 8:0.5723>
    User 3 -> <9:0.8817 7:0.8811 2:0.8464 3:0.6995>
    User 4 -> <3:0.9561 1:0.7253 9:0.6602 6:0.6064>
Precision@4 = 0.0
Recall@4 = 0.0
--> elapsed time: 0:00:00 <--
-------------------------
Testing MajorityRecommender (top 4)
Four example recommendations:
    User 1 -> <3:1 4:1 6:1 9:1>
    User 2 -> <5:2 1:1 3:1 10:1>
    User 3 -> <3:1 4:1 6:1 7:1>
    User 4 -> <5:2 1:1 3:1 6:1>
Precision@4 = 0.0
Recall@4 = 0.0
--> elapsed time: 0:00:00 <--
-------------------------
Testing AverageRecommender (top 4)
Four example recommendations:
    User 1 -> <4:4 6:4 9:2.5 2:2>
    User 2 -> <5:4 10:3.3333 1:2.6667>
    User 3 -> <4:4 6:4 7:2.6667 9:2.5>
    User 4 -> <5:4 6:4 1:2.6667 9:2.5>
Precision@4 = 0.0
Recall@4 = 0.0
--> elapsed time: 0:00:00 <--
-------------------------
Creating user cosine similarity
--> elapsed time: 0:00:00 <--
Creating kNN recommender
--> elapsed time: 0:00:00 <--
Testing UserKNNRecommender (top 4)
Four example recommendations:
    User 1 -> <4:2.2382 6:1.9852 9:1.3157 3:1.121>
    User 2 -> <10:2.4731 5:1.9231 8:1.5 3:1.2667>
    User 3 -> <6:2.3094 3:1.8475 9:1.8475 7:1.6725>
    User 4 -> <5:2.2317 6:1.5 1:0.9082 9:0.5>
Precision@4 = 0.0
Recall@4 = 0.0
--> elapsed time: 0:00:00 <--
=========================
Testing MovieLens '1 million' dataset
Reading the data at 14:37:47...
Ratings matrix takes 85.4 MB in RAM
--> elapsed time: 0:00:06 <--
-------------------------
Testing the ratings data structures
1,000,209 ratings by 6,040 users on 3,706 items
Ratings of user 200: {8: 3, 170: 5, 940: 4, 1059: 5, 1127: 4, 1441: 4, 1605: 1, 1911: 2, 2041: 5, 2355: 3, 2555: 2, 2572: 5, 2599: 3, 2605: 2, 2683: 3, 2694: 5, 2699: 4, 2706: 2, 2759: 2, 2770: 2, 2779: 2, 2827: 3, 2997: 4, 3051: 5, 3408: 5, 3751: 4}
Ratings of item 1000: {474: 5, 1733: 2, 2820: 3, 3032: 4, 3193: 2, 3197: 3, 3224: 4, 3391: 3, 3507: 4, 3526: 3, 3644: 5, 3829: 4, 3868: 4, 3942: 1, 4088: 3, 4139: 4, 4732: 3, 5426: 2, 5682: 1, 5916: 1}
-------------------------
Testing RandomRecommender (top 10)
Four example recommendations:
    User 1 -> <3786:0.9996 3167:0.9991 136:0.999 1279:0.999 2558:0.9989 230:0.9988 1063:0.9987 2908:0.9987 313:0.9986 2643:0.9985>
    User 2 -> <2577:1 347:0.9995 3402:0.9994 1759:0.9984 1624:0.9984 3385:0.9984 3247:0.9983 89:0.9981 624:0.9974 2333:0.9971>
    User 3 -> <1009:0.9999 3944:0.9997 3745:0.9996 441:0.999 2799:0.9988 3730:0.9985 3390:0.9984 309:0.9982 1664:0.998 3859:0.9978>
    User 4 -> <2918:0.9997 3524:0.9996 2493:0.9996 2459:0.9993 1417:0.9992 729:0.9989 1858:0.9986 3372:0.998 1856:0.9974 1579:0.9974>
Precision@10 = 0.005513245033112584
Recall@10 = 0.0028740842393720463
--> elapsed time: 0:00:01 <--
-------------------------
Testing MajorityRecommender (top 10)
Four example recommendations:
    User 1 -> <2858:2276 260:2092 1196:2003 1198:1792 593:1786 2571:1721 1210:1715 589:1652 318:1622 110:1575>
    User 2 -> <260:2092 2762:1737 608:1682 527:1680 858:1573 1197:1540 1270:1538 1617:1519 296:1424 2997:1408>
    User 3 -> <2028:1828 1198:1792 2762:1737 2571:1721 608:1682 527:1680 589:1652 318:1622 110:1575 858:1573>
    User 4 -> <2858:2276 260:2092 593:1786 2762:1737 2571:1721 608:1682 527:1680 589:1652 318:1622 110:1575>
Precision@10 = 0.1504470198675497
Recall@10 = 0.09057157950356103
--> elapsed time: 0:00:01 <--
-------------------------
Testing AverageRecommender (top 10)
Four example recommendations:
    User 1 -> <3245:4.8 53:4.7143 1423:4.6667 2905:4.6271 2019:4.5667 318:4.5567 858:4.5474 50:4.5171 922:4.5066 1148:4.5007>
    User 2 -> <3245:4.8 53:4.7143 1423:4.6667 2905:4.6271 2019:4.5667 858:4.5474 745:4.5322 50:4.5171 922:4.5066 527:4.5011>
    User 3 -> <3245:4.8 53:4.7143 1423:4.6667 2905:4.6271 2019:4.5667 318:4.5567 858:4.5474 745:4.5322 50:4.5171 922:4.5066>
    User 4 -> <3245:4.8 53:4.7143 1423:4.6667 2905:4.6271 2019:4.5667 318:4.5567 858:4.5474 745:4.5322 50:4.5171 922:4.5066>
Precision@10 = 0.032069536423841055
Recall@10 = 0.01948560510791728
--> elapsed time: 0:00:01 <--
-------------------------
Creating user cosine similarity
--> elapsed time: 0:00:02 <--
Creating kNN recommender
--> elapsed time: 0:00:02 <--
Testing UserKNNRecommender (top 10)
Four example recommendations:
    User 1 -> <2080:7.762 595:7.7555 2078:7.5221 1028:7.3707 2081:7.3664 593:7.1862 539:6.7149 2396:6.4063 2096:6.4045 356:6.2173>
    User 2 -> <1580:10.2388 260:9.3034 1608:8.9713 1961:8.7534 733:8.3107 316:8.208 527:8.1247 2763:8.0284 1240:7.7006 858:7.5351>
    User 3 -> <2571:9.9567 1198:8.4205 2987:7.6296 457:7.2453 1214:6.6526 1240:6.4791 110:6.1196 1127:6.0289 648:5.8921 1356:5.7916>
    User 4 -> <260:16.4481 2947:11.4749 110:11.3471 858:11.0612 1221:9.9354 1610:8.8879 1953:8.7876 457:8.7428 589:8.3949 1222:8.2185>
Precision@10 = 0.22963576158940396
Recall@10 = 0.18037092599036703
--> elapsed time: 0:00:00 <--
=========================
Done.